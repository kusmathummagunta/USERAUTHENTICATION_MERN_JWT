{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kusma\\\\javascript projects\\\\userauth\\\\client\\\\src\\\\pages\\\\register.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { FormControl, InputLabel } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //creating the variables we need as state variables\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\"); //first point where our frontend connects with our backend\n\n  async function registerUser(event) {\n    //we do this because form have a default behaviour of refreshing/redirecting the page on submit\n    event.preventDefault(); //wait for response and this line will fail ro fetch if we dont have a method\n\n    const response = await fetch(\"http://localhost:4000/api/register\", {\n      method: \"POST\",\n      //We also have to tell the backend that we are sending this as content type application/json. This is necessary because there are\n      //buch of different ways of content-types. we can send as binary data or url encoded but the simplest is JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // we are sending this to the back end\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    }); // we convert the response data ino JSON\n\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      onSubmit: registerUser,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: [\"value=\", name, \"onChange=\", e => setName(e.target.value), \"type=\\\"text\\\" placeholder=\\\"First Name\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        children: [\"value=\", email, \"onChange=\", e => setEmail(e.target.value), \"type=\\\"email\\\" placeholder=\\\"Email\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        children: [\"value=\", password, \"onChange=\", e => setPassword(e.target.value), \"type=\\\"password\\\" placeholder=\\\"Password\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"U1DCtFSIKcmCKgpSr3L7jOg/618=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/kusma/javascript projects/userauth/client/src/pages/register.js"],"names":["useState","FormControl","InputLabel","App","name","setName","email","setEmail","password","setPassword","registerUser","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC,CAJa,CAMb;;AACA,iBAAeU,YAAf,CAA4BC,KAA5B,EAAmC;AACjC;AACAA,IAAAA,KAAK,CAACC,cAAN,GAFiC,CAIjC;;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AACjEC,MAAAA,MAAM,EAAE,MADyD;AAEjE;AACA;AACAC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAJwD;AAOjE;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBf,QAAAA,IADmB;AAEnBE,QAAAA,KAFmB;AAGnBE,QAAAA;AAHmB,OAAf;AAR2D,KAAvC,CAA5B,CALiC,CAmBjC;;AACA,UAAMY,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD;;AACD,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEV,YAAvB;AAAA,8BACE,QAAC,UAAD;AAAA,6BACSN,IADT,eAEaoB,CAAD,IAAOnB,OAAO,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAF1B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,UAAD;AAAA,6BACSpB,KADT,eAEakB,CAAD,IAAOjB,QAAQ,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAF3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAYE;AAAA;AAAA;AAAA;AAAA,cAZF,eAaE,QAAC,UAAD;AAAA,6BACSlB,QADT,eAEagB,CAAD,IAAOf,WAAW,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,eAkBE;AAAA;AAAA;AAAA;AAAA,cAlBF,eAmBE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GAzDQvB,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport { FormControl, InputLabel } from \"@mui/material\";\n\nfunction App() {\n  //creating the variables we need as state variables\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  //first point where our frontend connects with our backend\n  async function registerUser(event) {\n    //we do this because form have a default behaviour of refreshing/redirecting the page on submit\n    event.preventDefault();\n\n    //wait for response and this line will fail ro fetch if we dont have a method\n    const response = await fetch(\"http://localhost:4000/api/register\", {\n      method: \"POST\",\n      //We also have to tell the backend that we are sending this as content type application/json. This is necessary because there are\n      //buch of different ways of content-types. we can send as binary data or url encoded but the simplest is JSON\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      // we are sending this to the back end\n      body: JSON.stringify({\n        name,\n        email,\n        password,\n      }),\n    });\n    // we convert the response data ino JSON\n    const data = await response.json();\n\n    console.log(data);\n  }\n  return (\n    <div>\n      <h1>Register</h1>\n      <FormControl onSubmit={registerUser}>\n        <InputLabel>\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          type=\"text\" placeholder=\"First Name\"\n        </InputLabel>\n        <br />\n        <InputLabel>\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          type=\"email\" placeholder=\"Email\"\n        </InputLabel>\n        <br />\n        <InputLabel>\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type=\"password\" placeholder=\"Password\"\n        </InputLabel>\n        <br />\n        <button type=\"submit\">Register</button>\n      </FormControl>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}