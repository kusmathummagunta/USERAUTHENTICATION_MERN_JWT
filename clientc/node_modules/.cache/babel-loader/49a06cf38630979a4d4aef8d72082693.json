{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction decodeToken(token) {\n  try {\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    var payload = token.split(\".\")[1];\n    var padding = \"=\".repeat((4 - payload.length % 4) % 4);\n    var base64 = payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    var decoded = JSON.parse(atob(base64));\n    return decoded;\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction isTokenExpired(token) {\n  var decodedToken = decodeToken(token);\n  var result = true;\n\n  if (decodedToken && decodedToken.exp) {\n    var expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp);\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n\nfunction useJwt(userJwt) {\n  var _useState = useState(false),\n      isExpired = _useState[0],\n      setIsExpired = _useState[1];\n\n  var _useState2 = useState(null),\n      decodedToken = _useState2[0],\n      setDecodedToken = _useState2[1];\n\n  useEffect(function () {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  var evaluateToken = function evaluateToken(token) {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return {\n    isExpired: isExpired,\n    decodedToken: decodedToken,\n    reEvaluateToken: evaluateToken\n  };\n}\n\nexport { decodeToken, isTokenExpired as isExpired, useJwt };","map":{"version":3,"mappings":";;SAKgBA,YAAYC;AAC1B,MAAI;AAGF,QAAIA,KAAK,CAACC,KAAND,CAAY,GAAZA,EAAiBE,MAAjBF,KAA4B,CAA5BA,IAAiC,OAAOA,KAAP,KAAiB,QAAtD,EAAgE;AAC9D,aAAO,IAAP;AACD;;AAID,QAAMG,OAAO,GAAWH,KAAK,CAACC,KAAND,CAAY,GAAZA,EAAiB,CAAjBA,CAAxB;AAEA,QAAMI,OAAO,GAAW,IAAIC,MAAJ,CAAW,CAAC,IAAKF,OAAO,CAACD,MAARC,GAAiB,CAAvB,IAA6B,CAAxC,CAAxB;AAEA,QAAMG,MAAM,GACVH,OAAO,CAACI,OAARJ,CAAgB,GAAhBA,EAAqB,GAArBA,EAA0BI,OAA1BJ,CAAkC,GAAlCA,EAAuC,GAAvCA,IAA8CC,OADhD;AAGA,QAAMI,OAAO,GAAGC,IAAI,CAACC,KAALD,CAAWE,IAAI,CAACL,MAAD,CAAfG,CAAhB;AAEA,WAAOD,OAAP;AAlBF,IAmBE,OAAOI,KAAP,EAAc;AAEd,WAAO,IAAP;AACD;AACF;;SAOeC,eAAeb;AAC7B,MAAMc,YAAY,GAAQf,WAAW,CAACC,KAAD,CAArC;AACA,MAAIe,MAAM,GAAY,IAAtB;;AAEA,MAAID,YAAY,IAAIA,YAAY,CAACE,GAAjC,EAAsC;AACpC,QAAMC,cAAc,GAAS,IAAIC,IAAJ,CAAS,CAAT,CAA7B;AACAD,kBAAc,CAACE,aAAfF,CAA6BH,YAAY,CAACE,GAA1CC;AAEAF,UAAM,GAAGE,cAAc,CAACG,OAAfH,KAA2B,IAAIC,IAAJ,GAAWE,OAAX,EAApCL;AACD;;AAED,SAAOA,MAAP;AACD;;SCxCeM,OAAOC;kBACaC,QAAQ,CAAU,KAAV;MAAnCC;MAAWC;;mBACsBF,QAAQ,CAAM,IAAN;MAAzCT;MAAcY;;AAErBC,WAAS,CAAC;AACRC,iBAAa,CAACN,OAAD,CAAbM;AADO,KAEN,CAACN,OAAD,CAFM,CAATK;;AAIA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAC5B,KAAD;AACpB0B,mBAAe,CAAC3B,WAAW,CAACC,KAAD,CAAZ,CAAf0B;AACAD,gBAAY,CAACZ,cAAc,CAACb,KAAD,CAAf,CAAZyB;AAFF;;AAKA,SAAO;AAAED,aAAS,EAATA,SAAF;AAAaV,gBAAY,EAAZA,YAAb;AAA2Be,mBAAe,EAAED;AAA5C,GAAP;AACD","names":["decodeToken","token","split","length","payload","padding","repeat","base64","replace","decoded","JSON","parse","atob","error","isTokenExpired","decodedToken","result","exp","expirationDate","Date","setUTCSeconds","valueOf","useJwt","userJwt","useState","isExpired","setIsExpired","setDecodedToken","useEffect","evaluateToken","reEvaluateToken"],"sources":["C:\\Users\\kusma\\javascriptprojects\\userauth\\client\\node_modules\\react-jwt\\src\\jwt\\index.ts","C:\\Users\\kusma\\javascriptprojects\\userauth\\client\\node_modules\\react-jwt\\src\\hooks\\index.tsx"],"sourcesContent":["/**\n * Try to decode a JWT. If the token is valid you'll get an object otherwise you'll get null\n * @param token - The JWT that you want to decode\n * @returns Decoded token\n */\nexport function decodeToken(token: string): Object | null {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    // payload ( index 1 ) has the data stored and\n    // data about the expiration time\n    const payload: string = token.split(\".\")[1];\n    // determine the padding characters required for the base64 string\n    const padding: string = \"=\".repeat((4 - (payload.length % 4)) % 4);\n    // convert the base64url string to a base64 string\n    const base64: string =\n      payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    // decode and parse to json\n    const decoded = JSON.parse(atob(base64));\n\n    return decoded;\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\n/**\n * Verify if the token is expired or not\n * @param token - Your JWT\n * @returns boolean\n */\nexport function isTokenExpired(token: string): boolean {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\n/**\n * This function will help you to decode a JWT and know if it's expired or not\n * @param userJwt - Your JWT\n * @returns An object containing the properties isExpired, decodedToken and reEvaluateToken\n */\nexport function useJwt(userJwt: string): IUseJwt {\n  const [isExpired, setIsExpired] = useState<boolean>(false);\n  const [decodedToken, setDecodedToken] = useState<any>(null);\n\n  useEffect(() => {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  const evaluateToken = (token: string) => {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return { isExpired, decodedToken, reEvaluateToken: evaluateToken };\n}\n\ninterface IUseJwt {\n  isExpired: boolean;\n  decodedToken: Object;\n  reEvaluateToken: (token: string) => void;\n}\n"]},"metadata":{},"sourceType":"module"}