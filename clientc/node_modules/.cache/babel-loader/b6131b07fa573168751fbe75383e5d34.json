{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kusma\\\\javascript projects\\\\userauth\\\\client\\\\src\\\\pages\\\\dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { decodeToken } from \"react-jwt\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  //we use usehistory hook from react router\n  const navigate = useNavigate();\n  const [quote, setQuote] = useState(\"\");\n  const [tempQuote, setTempQuote] = useState(\"\");\n\n  async function populateQuote() {\n    const req = await fetch(\"http://localhost:4000/api/dashboard\", {\n      headers: {\n        \"x-access-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const data = await req.json();\n\n    if (data.status === \"ok\") {\n      setQuote(data.quote);\n    } else {\n      alert(data.error);\n    }\n  } //we need to verify if the user is logged in and so we use the useeffect hook\n\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\"); // we get the token from local storage\n\n    if (token) {\n      const user = localStorage.getItem(\"user\"); //if user doesn't exist then it's kind of wrong\n\n      if (!user) {\n        localStorage.removeItem(\"token\");\n        navigate(\"/login\", {\n          replace: true\n        });\n      } else {\n        //if/ the user exists we need to send to the backend and populate the values\n        populateQuote();\n      }\n    }\n  }, []);\n\n  async function updatequote(e) {\n    e.preventDefault();\n    const req = await fetch(\"http://localhost:4000/api/dashboard\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        quote: tempQuote\n      })\n    });\n    const data = await req.json();\n\n    if (data.status === \"ok\") {\n      setQuote(tempQuote);\n      setTempQuote(\"\");\n    } else {\n      alert(data.error);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Your quote: \", quote || \"No quote found\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"from\", {\n        onSubmit: updatequote,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"quote\",\n          value: tempQuote,\n          onChange: e => setTempQuote(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Update quote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Dashboard, \"8Vl/+Wbarls5hbwRVlZ/j0cBzu4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/kusma/javascript projects/userauth/client/src/pages/dashboard.js"],"names":["React","useEffect","useState","decodeToken","useNavigate","Dashboard","navigate","quote","setQuote","tempQuote","setTempQuote","populateQuote","req","fetch","headers","localStorage","getItem","data","json","status","alert","error","token","user","removeItem","replace","updatequote","e","preventDefault","method","body","JSON","stringify","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { decodeToken } from \"react-jwt\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Dashboard = () => {\r\n  //we use usehistory hook from react router\r\n  const navigate = useNavigate();\r\n  const [quote, setQuote] = useState(\"\");\r\n  const [tempQuote, setTempQuote] = useState(\"\");\r\n\r\n  async function populateQuote() {\r\n    const req = await fetch(\"http://localhost:4000/api/dashboard\", {\r\n      headers: {\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n    });\r\n    const data = await req.json();\r\n\r\n    if (data.status === \"ok\") {\r\n      setQuote(data.quote);\r\n    } else {\r\n      alert(data.error);\r\n    }\r\n  }\r\n  //we need to verify if the user is logged in and so we use the useeffect hook\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    // we get the token from local storage\r\n    if (token) {\r\n      const user = localStorage.getItem(\"user\");\r\n\r\n      //if user doesn't exist then it's kind of wrong\r\n      if (!user) {\r\n        localStorage.removeItem(\"token\");\r\n        navigate(\"/login\", { replace: true });\r\n      } else {\r\n        //if/ the user exists we need to send to the backend and populate the values\r\n        populateQuote();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  async function updatequote(e) {\r\n    e.preventDefault();\r\n\r\n    const req = await fetch(\"http://localhost:4000/api/dashboard\", {\r\n      method: \"POST\",\r\n\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({\r\n        quote: tempQuote,\r\n      }),\r\n    });\r\n\r\n    const data = await req.json();\r\n    if (data.status === \"ok\") {\r\n      setQuote(tempQuote);\r\n      setTempQuote(\"\");\r\n    } else {\r\n      alert(data.error);\r\n    }\r\n    return (\r\n      <div>\r\n        <h1>Your quote: {quote || \"No quote found\"}</h1>\r\n        <from onSubmit={updatequote}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"quote\"\r\n            value={tempQuote}\r\n            onChange={(e) => setTempQuote(e.target.value)}\r\n          />\r\n          <input type=\"submit\" value=\"Update quote\" />\r\n        </from>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}