{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kusma\\\\javascript projects\\\\userauth\\\\client\\\\src\\\\pages\\\\register.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { FormControl, InputLabel, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //creating the variables we need as state variables\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\"); //first point where our frontend connects with our backend\n\n  async function registerUser(event) {\n    //we do this because form have a default behaviour of refreshing/redirecting the page on submit\n    event.preventDefault(); //wait for response and this line will fail ro fetch if we dont have a method\n\n    const response = await fetch(\"http://localhost:4000/api/register\", {\n      method: \"POST\",\n      //We also have to tell the backend that we are sending this as content type application/json. This is necessary because there are\n      //buch of different ways of content-types. we can send as binary data or url encoded but the simplest is JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // we are sending this to the back end\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    }); // we convert the response data ino JSON\n\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    onSubmit: registerUser,\n    sx: {\n      \"& .MuiTextField-root\": {\n        m: 1,\n        width: \"50ch\"\n      }\n    },\n    noValidate: true,\n    autoComplete: \"off\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: name,\n        onChange: e => setName(e.target.value),\n        type: \"text\",\n        placeholder: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        type: \"email\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        type: \"password\",\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"U1DCtFSIKcmCKgpSr3L7jOg/618=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/kusma/javascript projects/userauth/client/src/pages/register.js"],"names":["useState","FormControl","InputLabel","TextField","Box","App","name","setName","email","setEmail","password","setPassword","registerUser","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","m","width","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,QAAmD,eAAnD;AACA,SAASC,GAAT,QAAoB,aAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC,CAJa,CAMb;;AACA,iBAAeY,YAAf,CAA4BC,KAA5B,EAAmC;AACjC;AACAA,IAAAA,KAAK,CAACC,cAAN,GAFiC,CAIjC;;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AACjEC,MAAAA,MAAM,EAAE,MADyD;AAEjE;AACA;AACAC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAJwD;AAOjE;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBf,QAAAA,IADmB;AAEnBE,QAAAA,KAFmB;AAGnBE,QAAAA;AAHmB,OAAf;AAR2D,KAAvC,CAA5B,CALiC,CAmBjC;;AACA,UAAMY,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD;;AACD,sBACE,QAAC,GAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,QAAQ,EAAEV,YAFZ;AAGE,IAAA,EAAE,EAAE;AACF,8BAAwB;AAAEc,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,KAAK,EAAE;AAAf;AADtB,KAHN;AAME,IAAA,UAAU,MANZ;AAOE,IAAA,YAAY,EAAC,KAPf;AAAA,2BASE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AACE,QAAA,KAAK,EAAErB,IADT;AAEE,QAAA,QAAQ,EAAGsB,CAAD,IAAOrB,OAAO,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAF1B;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cAFF,eAQE,QAAC,SAAD;AACE,QAAA,KAAK,EAAEtB,KADT;AAEE,QAAA,QAAQ,EAAGoB,CAAD,IAAOnB,QAAQ,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAF3B;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cARF,eAcE,QAAC,SAAD;AACE,QAAA,KAAK,EAAEpB,QADT;AAEE,QAAA,QAAQ,EAAGkB,CAAD,IAAOjB,WAAW,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAF9B;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cAdF,eAoBE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;GAjEQzB,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport { FormControl, InputLabel, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nfunction App() {\n  //creating the variables we need as state variables\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  //first point where our frontend connects with our backend\n  async function registerUser(event) {\n    //we do this because form have a default behaviour of refreshing/redirecting the page on submit\n    event.preventDefault();\n\n    //wait for response and this line will fail ro fetch if we dont have a method\n    const response = await fetch(\"http://localhost:4000/api/register\", {\n      method: \"POST\",\n      //We also have to tell the backend that we are sending this as content type application/json. This is necessary because there are\n      //buch of different ways of content-types. we can send as binary data or url encoded but the simplest is JSON\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      // we are sending this to the back end\n      body: JSON.stringify({\n        name,\n        email,\n        password,\n      }),\n    });\n    // we convert the response data ino JSON\n    const data = await response.json();\n\n    console.log(data);\n  }\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={registerUser}\n      sx={{\n        \"& .MuiTextField-root\": { m: 1, width: \"50ch\" },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>\n        <h1>Register</h1>\n        <TextField\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          type=\"text\"\n          placeholder=\"name\"\n        />\n        <TextField\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        <TextField\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button type=\"submit\">Register</button>\n      </div>\n    </Box>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}