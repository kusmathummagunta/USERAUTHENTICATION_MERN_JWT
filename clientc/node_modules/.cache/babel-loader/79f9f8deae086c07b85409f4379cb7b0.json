{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kusma\\\\javascript projects\\\\userauth\\\\client\\\\src\\\\pages\\\\register.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Button, FormControl, Modal, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { makeStyles } from \"@mui/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  box: {\n    width: \"50ch\",\n    backgroundColor: \"white\",\n    border: 10,\n    borderRadius: 3,\n    margin: \"5ch\",\n    alignmentBaseline: \"central\"\n  },\n  button: {\n    width: \"50ch\",\n    height: \"7ch\",\n    border: 10,\n    borderRadius: 3,\n    margin: \"5ch\",\n    backgroundColor: \"white\",\n    display: \"inline-flex\"\n  },\n  paper: {\n    border: 10,\n    borderRadius: 3,\n    color: \"Black\",\n    height: 200,\n    padding: \"10px 30px\",\n    alignSelf: \"center\"\n  }\n});\n\nfunction App() {\n  _s();\n\n  //creating the variables we need as state variables\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\"); //first point where our frontend connects with our backend\n\n  async function registerUser(event) {\n    //we do this because form have a default behaviour of refreshing/redirecting the page on submit\n    event.preventDefault(); //wait for response and this line will fail ro fetch if we dont have a method\n\n    const response = await fetch(\"http://localhost:4000/api/register\", {\n      method: \"POST\",\n      //We also have to tell the backend that we are sending this as content type application/json. This is necessary because there are\n      //buch of different ways of content-types. we can send as binary data or url encoded but the simplest is JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // we are sending this to the back end\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    }); // we convert the response data ino JSON\n\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.paper,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        onSubmit: registerUser,\n        className: classes.Box,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Name\",\n          variant: \"outlined\",\n          value: name,\n          type: \"text\",\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Email\",\n          variant: \"outlined\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Password\",\n          variant: \"outlined\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.button,\n          variant: \"outlined\",\n          type: \"submit\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OmnhIGSAgZw0Xk0MlaO7kt68Rgc=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/kusma/javascript projects/userauth/client/src/pages/register.js"],"names":["useState","Button","FormControl","Modal","TextField","Box","makeStyles","useStyles","box","width","backgroundColor","border","borderRadius","margin","alignmentBaseline","button","height","display","paper","color","padding","alignSelf","App","classes","name","setName","email","setEmail","password","setPassword","registerUser","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","e","target","value"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Button, FormControl, Modal, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { makeStyles } from \"@mui/styles\";\n\nconst useStyles = makeStyles({\n  box: {\n    width: \"50ch\",\n    backgroundColor: \"white\",\n    border: 10,\n    borderRadius: 3,\n    margin: \"5ch\",\n    alignmentBaseline: \"central\",\n  },\n  button: {\n    width: \"50ch\",\n    height: \"7ch\",\n    border: 10,\n    borderRadius: 3,\n    margin: \"5ch\",\n    backgroundColor: \"white\",\n    display: \"inline-flex\",\n  },\n  paper: {\n    border: 10,\n    borderRadius: 3,\n    color: \"Black\",\n    height: 200,\n    padding: \"10px 30px\",\n    alignSelf: \"center\",\n  },\n});\nfunction App() {\n  //creating the variables we need as state variables\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  //first point where our frontend connects with our backend\n  async function registerUser(event) {\n    //we do this because form have a default behaviour of refreshing/redirecting the page on submit\n    event.preventDefault();\n\n    //wait for response and this line will fail ro fetch if we dont have a method\n    const response = await fetch(\"http://localhost:4000/api/register\", {\n      method: \"POST\",\n      //We also have to tell the backend that we are sending this as content type application/json. This is necessary because there are\n      //buch of different ways of content-types. we can send as binary data or url encoded but the simplest is JSON\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      // we are sending this to the back end\n      body: JSON.stringify({\n        name,\n        email,\n        password,\n      }),\n    });\n    // we convert the response data ino JSON\n    const data = await response.json();\n\n    console.log(data);\n  }\n  return (\n    <div className={classes.paper}>\n      <h1>Register</h1>\n      <form>\n        <FormControl onSubmit={registerUser} className={classes.Box}>\n          <TextField\n            label=\"Name\"\n            variant=\"outlined\"\n            value={name}\n            type=\"text\"\n            onChange={(e) => setName(e.target.value)}\n          />\n          <br />\n          <TextField\n            label=\"Email\"\n            variant=\"outlined\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            type=\"email\"\n          />\n          <br />\n          <TextField\n            label=\"Password\"\n            variant=\"outlined\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type=\"password\"\n          />\n          <br />\n          <Button className={classes.button} variant=\"outlined\" type=\"submit\">\n            Register\n          </Button>\n        </FormControl>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}